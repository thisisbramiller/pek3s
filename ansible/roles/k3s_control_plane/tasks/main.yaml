- name: Stop k3s-init
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: Stop k3s
  systemd:
    name: k3s
    state: stopped
  failed_when: false

# - name: reset failed k3s initializations
#   command: systemctl reset-failed k3s-init
#   failed_when: false
#   changed_when: false

- name: Initialize cluster
  command:
    cmd: "systemd-run -p RestartSec=2 -p Restart=on-failure --unit=k3s-init k3s server --cluster-init --token {{k3s_token}}"
    creates: "{{systemd_directory}}/k3s-init.service"

- name: Debug statement
  command:
    cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
  register: command_output
  retries: 20
  delay: 10
  changed_when: false
  
- debug:
    var: command_output.stdout_lines

# - name: Validate
#   when: not ansible_check_mode
#   block:
#     - name: Validate nodes
#       command:
#         cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
#       register: nodes
#       until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups[control_plane_group | default('master')] | length)
#       retries: 20
#       delay: 10
#       changed_when: false
#   always:
#     - name: Kill initialization service
#       systemd:
#         name: k3s-init
#         state: stopped
#       failed_when: false

- name: Copy k3s.service.j2 file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{systemd_directory}}/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: Wait for node-token presence
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Change node-token file permissions 
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from control plane
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store control plane node-token
  set_fact:
    token: "{{node_token.content | b64decode | regex_replace('\n', '')}}"

- name: Restore node-token file permissions
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{p.stat.mode}}"

- name: Create .kube directory
  file:
    path: "{{ansible_user_dir}}/.kube"
    state: directory
    owner: "{{ansible_user_id}}"
    mode: "u=rwx,g=rx,o="


- name: Copy .kube/config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ansible_user_dir}}/.kube/config"
    remote_src: true
    owner: "{{ansible_user_id}}"
    mode: "u=rw,g=,o="

- name: Configure k3s cluster to {{endpoint_ip}}
  command: >-
    k3s kubectl config set-cluster default
      --server={{endpoint_ip}}
      --kubeconfig {{ansible_user_dir}}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{apiserver_endpoint | ansible.utils.ipwrap}}:6443

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Get files from manifests directory
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: Get sub directories of manifests directory
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: Remove k3s bootstrapping
  file:
    path: "{{item.path}}"
    state: absent
  with_items:
    - "{{k3s_server_manifests.files}}"
    - "{{k3s_server_manifests_directories.files}}"
  loop_control:
    label: "{{item.path}}"